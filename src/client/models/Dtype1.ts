/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BoundingBox } from './BoundingBox';
import {
    BoundingBoxFromJSON,
    BoundingBoxFromJSONTyped,
    BoundingBoxToJSON,
} from './BoundingBox';
import type { CategoryDType } from './CategoryDType';
import {
    CategoryDTypeFromJSON,
    CategoryDTypeFromJSONTyped,
    CategoryDTypeToJSON,
} from './CategoryDType';

/**
 *
 * @export
 * @interface Dtype1
 */
export interface Dtype1 {
    /**
     *
     * @type {string}
     * @memberof Dtype1
     */
    name?: Dtype1NameEnum;
    /**
     *
     * @type {{ [key: string]: number; }}
     * @memberof Dtype1
     */
    categories: { [key: string]: number };
}

/**
 * @export
 */
export const Dtype1NameEnum = {
    Category: 'Category',
} as const;
export type Dtype1NameEnum = typeof Dtype1NameEnum[keyof typeof Dtype1NameEnum];

/**
 * Check if a given object implements the Dtype1 interface.
 */
export function instanceOfDtype1(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && 'categories' in value;

    return isInstance;
}

export function Dtype1FromJSON(json: any): Dtype1 {
    return Dtype1FromJSONTyped(json, false);
}

export function Dtype1FromJSONTyped(json: any, ignoreDiscriminator: boolean): Dtype1 {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        name: !exists(json, 'name') ? undefined : json['name'],
        categories: json['categories'],
    };
}

export function Dtype1ToJSON(value?: Dtype1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        name: value.name,
        categories: value.categories,
    };
}
