/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ArrayDType } from './ArrayDType';
import {
    ArrayDTypeFromJSON,
    ArrayDTypeFromJSONTyped,
    ArrayDTypeToJSON,
} from './ArrayDType';
import type { BaseDType } from './BaseDType';
import {
    BaseDTypeFromJSON,
    BaseDTypeFromJSONTyped,
    BaseDTypeToJSON,
} from './BaseDType';
import type { BoundingBox } from './BoundingBox';
import {
    BoundingBoxFromJSON,
    BoundingBoxFromJSONTyped,
    BoundingBoxToJSON,
} from './BoundingBox';
import type { CategoryDType } from './CategoryDType';
import {
    CategoryDTypeFromJSON,
    CategoryDTypeFromJSONTyped,
    CategoryDTypeToJSON,
} from './CategoryDType';
import type { Dtype1 } from './Dtype1';
import { Dtype1FromJSON, Dtype1FromJSONTyped, Dtype1ToJSON } from './Dtype1';
import type { EmbeddingDType } from './EmbeddingDType';
import {
    EmbeddingDTypeFromJSON,
    EmbeddingDTypeFromJSONTyped,
    EmbeddingDTypeToJSON,
} from './EmbeddingDType';
import type { Sequence1DDType } from './Sequence1DDType';
import {
    Sequence1DDTypeFromJSON,
    Sequence1DDTypeFromJSONTyped,
    Sequence1DDTypeToJSON,
} from './Sequence1DDType';
import type { SequenceDType } from './SequenceDType';
import {
    SequenceDTypeFromJSON,
    SequenceDTypeFromJSONTyped,
    SequenceDTypeToJSON,
} from './SequenceDType';

/**
 *
 * @export
 * @interface Dtype
 */
export interface Dtype {
    /**
     *
     * @type {string}
     * @memberof Dtype
     */
    name: DtypeNameEnum;
    /**
     *
     * @type {{ [key: string]: number; }}
     * @memberof Dtype
     */
    categories: { [key: string]: number };
    /**
     *
     * @type {Array<number>}
     * @memberof Dtype
     */
    shape?: Array<number>;
    /**
     *
     * @type {string}
     * @memberof Dtype
     */
    length?: string;
    /**
     *
     * @type {string}
     * @memberof Dtype
     */
    xLabel: string;
    /**
     *
     * @type {string}
     * @memberof Dtype
     */
    yLabel: string;
    /**
     *
     * @type {Dtype1}
     * @memberof Dtype
     */
    dtype: Dtype1;
}

/**
 * @export
 */
export const DtypeNameEnum = {
    Sequence: 'Sequence',
} as const;
export type DtypeNameEnum = typeof DtypeNameEnum[keyof typeof DtypeNameEnum];

/**
 * Check if a given object implements the Dtype interface.
 */
export function instanceOfDtype(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && 'name' in value;
    isInstance = isInstance && 'categories' in value;
    isInstance = isInstance && 'xLabel' in value;
    isInstance = isInstance && 'yLabel' in value;
    isInstance = isInstance && 'dtype' in value;

    return isInstance;
}

export function DtypeFromJSON(json: any): Dtype {
    return DtypeFromJSONTyped(json, false);
}

export function DtypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Dtype {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        name: json['name'],
        categories: json['categories'],
        shape: !exists(json, 'shape') ? undefined : json['shape'],
        length: !exists(json, 'length') ? undefined : json['length'],
        xLabel: json['x_label'],
        yLabel: json['y_label'],
        dtype: Dtype1FromJSON(json['dtype']),
    };
}

export function DtypeToJSON(value?: Dtype | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        name: value.name,
        categories: value.categories,
        shape: value.shape,
        length: value.length,
        x_label: value.xLabel,
        y_label: value.yLabel,
        dtype: Dtype1ToJSON(value.dtype),
    };
}
